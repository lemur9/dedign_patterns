/**
 * 开闭原则
 * <p>
 * 原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化
 *  描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。
 *  优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。
 * <p>
 *  在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。
 *  想要达到这样的效果，我们需要使用接口和抽象类。
 *  因为抽象灵活性好，适应性广，只要抽象地合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。
 */
package org.lemur.principles.demo1;

