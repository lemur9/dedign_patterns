/**
 * 依赖倒转原则
 * <p>
 * 原则思想：高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象，抽象不应该依赖于具体实现，具体实现应该依赖于抽象。
 *  描述：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。
 *  优点：可以减少需求变化带来的工作量，做并行开发更加友好。
 * <p>
 * 高层模块不应该依赖低层模块，两者都应该依赖其抽象；
 * 抽象不应该依赖细节，细节应该依赖抽象。
 * 简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
 */
package org.lemur.principles.demo3;